name: Backend

on:
  push:
    branches: ["main"]
    paths:
      [
        "docker-compose.yml",
        "backend/**",
        "shared/**",
        "nginx/**",
        "data/**",
        ".github/workflows/vps-backend-deploy.yml",
      ]

jobs:
  Tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      TEST_DATABASE_URL: postgres://test_user:test_pass@localhost:5432/test_db

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install nightly Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt

      - name: lint
        run: cargo clippy & cargo fmt

      - name: Prepare SQLx Offline Data
        run: |
          cargo install sqlx-cli --no-default-features --features postgres
          cargo sqlx migrate run --source migrations/postgres
          cargo sqlx prepare --workspace -- --bin backend --features postgres --no-default-features
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}

      - name: Upload SQLx Data
        uses: actions/upload-artifact@v4
        with:
          name: sqlx-data
          path: .sqlx/**/*

      - name: Run tests
        run: cargo test --no-default-features --features postgres
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}

  Backend-Build-and-deploy-to-VPS:
    needs: Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download SQLx Offline Data
        uses: actions/download-artifact@v4
        with:
          name: sqlx-data
          path: .sqlx

      - name: Build Docker images
        run: |
          docker build -t backend:latest -f ./backend/Dockerfile .
          docker save backend:latest > backend.tar
          chmod 664 backend.tar

      - name: Transfer Configuration and Images to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          source: "docker-compose.yml,./nginx/,backend.tar,./data/"
          target: "/webidler/tmp"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "POSTGRES_PASSWORD=${{ secrets.VPS_DB_PASSWORD }}" > /webidler/tmp/.env
            docker load < /webidler/tmp/backend.tar
            docker compose -f /webidler/tmp/docker-compose.yml stop
            docker compose -f /webidler/tmp/docker-compose.yml down
            docker compose -f /webidler/tmp/docker-compose.yml up -d
